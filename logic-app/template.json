{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "connections_slack_name": {
            "defaultValue": "slack",
            "type": "String"
        },
        "workflows_slacknotify_name": {
            "defaultValue": "slacknotify",
            "type": "String"
        },
        "serverfarms_SlackLogicAppsPlan_name": {
            "defaultValue": "SlackLogicAppsPlan",
            "type": "String"
        },
        "adminUsername": {
            "defaultValue": "demouser",
            "type": "string",
            "metadata": {
              "description": "Username for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Virtual Machine."
            }
        },
        "dnsLabelPrefix": {
            "type": "string",
            "metadata": {
                "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
            },
            "defaultValue": "msworkshopvm"
        },
        "windowsOSVersion": {
            "type": "string",
            "defaultValue": "2016-Datacenter",
            "allowedValues": [
                "2008-R2-SP1",
                "2012-Datacenter",
                "2012-R2-Datacenter",
                "2016-Nano-Server",
                "2016-Datacenter-with-Containers",
                "2016-Datacenter"
            ],
            "metadata": {
                "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
                }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "actionGroups_startvm_name": {
            "defaultValue": "startvm",
            "type": "String"
        },
        "activityLogAlerts_startvm_name": {
            "defaultValue": "startvm",
            "type": "String"
        }
    },
    "variables": {
        "storageAccountName": "msworkshopstorage",
        "nicName": "msworkshopNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "publicIPAddressName": "msworkshopPublicIp",
        "vmName": "msworkshopVM",
        "virtualNetworkName": "msworkshopVnet",
        "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
        "actionGroups_startvm_resourceId" : "[resourceId('Microsoft.Logic/workflows/', parameters('workflows_slacknotify_name'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "2016-01-01",
            "location": "[parameters('location')]",
            "sku": {
              "name": "Standard_LRS"
            },
            "kind": "Storage",
            "properties": {}
        },
        {
            "apiVersion": "2016-03-30",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "location": "[parameters('location')]",
            "properties": {
              "publicIPAllocationMethod": "Dynamic",
              "dnsSettings": {
                "domainNameLabel": "[parameters('dnsLabelPrefix')]"
              }
            },
            "tags": {
                "Environment": "Development"
            }
        },
        {
            "apiVersion": "2016-03-30",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[parameters('location')]",
            "properties": {
              "addressSpace": {
                "addressPrefixes": [
                  "[variables('addressPrefix')]"
                ]
              },
              "subnets": [
                {
                  "name": "[variables('subnetName')]",
                  "properties": {
                    "addressPrefix": "[variables('subnetPrefix')]"
                  }
                }
              ]
            },
            "tags": {
                "Environment": "Development"
            }
        },
        {
            "apiVersion": "2016-03-30",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
              "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
              "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
            ],
            "properties": {
              "ipConfigurations": [
                {
                  "name": "ipconfig1",
                  "properties": {
                    "privateIPAllocationMethod": "Dynamic",
                    "publicIPAddress": {
                      "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                    },
                    "subnet": {
                      "id": "[variables('subnetRef')]"
                    }
                  }
                }
              ]
            },
            "tags": {
                "Environment": "Development"
            }
        },
        {
            "apiVersion": "2017-03-30",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
              "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
              "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ],
            "properties": {
              "hardwareProfile": {
                "vmSize": "Standard_A2"
              },
              "osProfile": {
                "computerName": "[variables('vmName')]",
                "adminUsername": "[parameters('adminUsername')]",
                "adminPassword": "[parameters('adminPassword')]"
              },
              "storageProfile": {
                "imageReference": {
                  "publisher": "MicrosoftWindowsServer",
                  "offer": "WindowsServer",
                  "sku": "[parameters('windowsOSVersion')]",
                  "version": "latest"
                },
                "osDisk": {
                  "createOption": "FromImage"
                },
                "dataDisks": [
                  {
                    "diskSizeGB": 1023,
                    "lun": 0,
                    "createOption": "Empty"
                  }
                ]
              },
              "networkProfile": {
                "networkInterfaces": [
                  {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                  }
                ]
              },
              "diagnosticsProfile": {
                "bootDiagnostics": {
                  "enabled": true,
                  "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
                }
              }
            },
            "tags": {
                "Environment": "Development"
            }
        },
        {
            "comments": "LogicApp workflow",
            "type": "Microsoft.Logic/workflows",
            "name": "[parameters('workflows_slacknotify_name')]",
            "apiVersion": "2017-07-01",
            "location": "northeurope",
            "tags": {
                "Environment": "Development"
            },
            "scale": null,
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "context": {
                                                    "properties": {
                                                        "activityLog": {
                                                            "properties": {
                                                                "authorization": {
                                                                    "properties": {
                                                                        "action": {
                                                                            "type": "string"
                                                                        },
                                                                        "scope": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "caller": {
                                                                    "type": "string"
                                                                },
                                                                "channels": {
                                                                    "type": "string"
                                                                },
                                                                "claims": {
                                                                    "type": "string"
                                                                },
                                                                "correlationId": {
                                                                    "type": "string"
                                                                },
                                                                "description": {
                                                                    "type": "string"
                                                                },
                                                                "eventDataId": {
                                                                    "type": "string"
                                                                },
                                                                "eventSource": {
                                                                    "type": "string"
                                                                },
                                                                "eventTimestamp": {
                                                                    "type": "string"
                                                                },
                                                                "httpRequest": {
                                                                    "type": "string"
                                                                },
                                                                "level": {
                                                                    "type": "string"
                                                                },
                                                                "operationId": {
                                                                    "type": "string"
                                                                },
                                                                "operationName": {
                                                                    "type": "string"
                                                                },
                                                                "resourceGroupName": {
                                                                    "type": "string"
                                                                },
                                                                "resourceId": {
                                                                    "type": "string"
                                                                },
                                                                "resourceProviderName": {
                                                                    "type": "string"
                                                                },
                                                                "resourceType": {
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "type": "string"
                                                                },
                                                                "subStatus": {
                                                                    "type": "string"
                                                                },
                                                                "submissionTimestamp": {
                                                                    "type": "string"
                                                                },
                                                                "subscriptionId": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "properties": {
                                                    "properties": {},
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "schemaId": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Post_message": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['slack']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/chat.postMessage",
                                "queries": {
                                    "channel": "C0PCGPCUC",
                                    "text": "VM created in Resource Group:  @{triggerBody()?['data']?['context']?['activityLog']?['resourceGroupName']} Running Status:@{triggerBody()?['data']?['context']?['activityLog']?['status']}  VM Name:@{\n\n\nsubstring(string(triggerBody()?['data']?['context']?['activityLog']?['resourceId']),add(lastIndexOf(string(triggerBody()?['data']?['context']?['activityLog']?['resourceId']),'/'),1),sub(length(triggerBody()?['data']?['context']?['activityLog']?['resourceId']), add(lastIndexOf(string(triggerBody()?['data']?['context']?['activityLog']?['resourceId']),'/'),1)))}"

                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "slack": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('connections_slack_name'))]",
                                "connectionName": "slack",
                                "id": "[concat('/subscriptions/','subscription().subscriptionId','/providers/Microsoft.Web/locations/northeurope/managedApis/slack')]"
                            }
                        }
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', parameters('connections_slack_name'))]"
            ]
        },
        {
            "comments": "Connection to Slack",
            "type": "Microsoft.Web/connections",
            "name": "[parameters('connections_slack_name')]",
            "apiVersion": "2016-06-01",
            "location": "northeurope",
            "scale": null,
            "properties": {
                "displayName": "Slack API",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/northeurope/managedApis/', parameters('connections_slack_name'))]"
                }
            },
            "dependsOn": [],
            "tags": {
                "Environment": "Development"
            }
        },
        {
            "comments": "App service plan to host Logic App",
            "type": "Microsoft.Web/serverfarms",
            "sku": {
                "name": "S1",
                "tier": "Standard",
                "size": "S1",
                "family": "S",
                "capacity": 1
            },
            "kind": "app",
            "name": "[parameters('serverfarms_SlackLogicAppsPlan_name')]",
            "apiVersion": "2016-09-01",
            "location": "[parameters('location')]",
            "scale": null,
            "properties": {
                "name": "[parameters('serverfarms_SlackLogicAppsPlan_name')]",
                "workerTierName": null,
                "adminSiteName": null,
                "hostingEnvironmentProfile": null,
                "perSiteScaling": false,
                "reserved": false,
                "targetWorkerCount": 0,
                "targetWorkerSizeId": 0
            },
            "dependsOn": [],
            "tags": {
                "Environment": "Development"
            }
        },
        {
            "comments": "VM action group for alert notification",
            "type": "microsoft.insights/actionGroups",
            "name": "[parameters('actionGroups_startvm_name')]",
            "apiVersion": "2018-03-01",
            "location": "Global",
            "tags": {},
            "scale": null,
            "properties": {
                "groupShortName": "[parameters('actionGroups_startvm_name')]",
                "enabled": true,
                "emailReceivers": [],
                "smsReceivers": [],
                "webhookReceivers": [],
                "itsmReceivers": [],
                "azureAppPushReceivers": [],
                "automationRunbookReceivers": [],
                "voiceReceivers": [],
                "logicAppReceivers": [
                    {
                        "name": "start",
                        "resourceId": "[variables('actionGroups_startvm_resourceId')]",
                        "callbackUrl": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows/', parameters('workflows_slacknotify_name')), '/triggers/manual'), '2016-06-01').value]"
                   }
                ],
                "azureFunctionReceivers": []
            },
            "dependsOn": []
        },
        {
            "comments": "Generalized from resource: '/subscriptions/80c301f8-0098-4963-8ef1-f53ae4a61749/resourceGroups/ExamDevBoxRg/providers/microsoft.insights/activityLogAlerts/startvm'.",
            "type": "microsoft.insights/activityLogAlerts",
            "name": "[parameters('activityLogAlerts_startvm_name')]",
            "apiVersion": "2017-04-01",
            "location": "Global",
            "tags": {},
            "scale": null,
            "properties": {
                "scopes": [
                    "[concat('/subscriptions/',subscription().subscriptionId)]"
                ],
                "condition": {
                    "allOf": [
                        {
                            "field": "category",
                            "equals": "Administrative"
                        },
                        {
                            "field": "resourceId",
                            "equals": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]"
                        },
                        {
                            "field": "operationName",
                            "equals": "Microsoft.Compute/virtualMachines/start/action"
                        }
                    ]
                },
                "actions": {
                    "actionGroups": [
                        {
                            "actionGroupId": "[resourceId('microsoft.insights/actionGroups', parameters('actionGroups_startvm_name'))]",
                            "webhookProperties": {}
                        }
                    ]
                },
                "enabled": true,
                "description": "[parameters('activityLogAlerts_startvm_name')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]",
                "[resourceId('microsoft.insights/actionGroups', parameters('actionGroups_startvm_name'))]"
            ]
        }

    ],
    "outputs": {
        "WebHookURI": {
          "type": "string",
          "value": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows/', parameters('workflows_slacknotify_name')), '/triggers/manual'), '2016-06-01').value]"
        }
    }
}